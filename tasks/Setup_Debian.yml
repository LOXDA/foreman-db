---

# MYSQL OR POSTGRESQL (KNOW HOW TO) USE HUGEPAGES
# you'd still have to enable it in database server configuration
# - name: Disable thp
#   shell: |
#       echo never > /sys/kernel/mm/transparent_hugepage/enabled
#       echo never > /sys/kernel/mm/transparent_hugepage/defrag
#       echo 0 > /proc/sys/vm/compaction_proactiveness

- name: Install gpg
  ansible.builtin.apt:
    name: gpg

- name: Install Puppet Repository
  block:
    - name: Add Public Key
      ansible.builtin.apt_key:
        url: https://apt.puppetlabs.com/keyring.gpg
        state: present
    - name: Install Puppet Repo
      ansible.builtin.apt_repository:
        repo: deb https://apt.puppetlabs.com/ {{ ansible_distribution_release }} {{ puppet_version }}
        state: present
        filename: '{{ puppet_version }}'

- name: "Install Puppet Agent"
  ansible.builtin.apt:
    name: puppet-agent
    force: yes
    allow_unauthenticated: true

- name: "Bootstap Puppet Agent ssl"
  ansible.builtin.shell: |
    /opt/puppetlabs/bin/puppet config set server {{ groups['tfm_puppet'][0] }} --section main
    /opt/puppetlabs/bin/puppet ssl bootstrap --server {{ groups['tfm_puppet'][0] }}

- name: "Install and Configure Puppet Root CA"
  block:
    - name: "Fetch Puppet Root CA"
      ansible.builtin.shell: |
        echo quit | openssl s_client -showcerts -servername server -connect {{ groups['tfm_puppet'][0] }}:8140 > /usr/local/share/ca-certificates/{{ groups['tfm_puppet'][0] }}-CA.crt 2>&1
      args:
        executable: /bin/bash
    - name: "Install Puppet Root CA"
      ansible.builtin.shell: |
        update-ca-certificates --fresh
      args:
        executable: /bin/bash

- name: Install sudo
  apt:
    name: sudo
    update_cache: yes

- name: Install libpq-dev
  apt:
    name: libpq-dev
    update_cache: yes

- name: Install python3-psycopg2
  apt:
    name: python3-psycopg2
    update_cache: yes

- name: Install Postgresql server
  apt:
    name: "postgresql-{{ postgresql_version }}"
    update_cache: yes

- name: "Add a line to /etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
  ansible.builtin.lineinfile:
    path: "/etc/postgresql/{{ postgresql_version }}/main/postgresql.conf"
    line: listen_addresses = '*'

- name: "Add a line to /etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
  ansible.builtin.lineinfile:
    path: "/etc/postgresql/{{ postgresql_version }}/main/pg_hba.conf"
    line: host all all {{ lookup('community.general.dig', item + '.')}}/32 md5
  loop: "{{ groups['tfm_app'] }}"

- name: Restart service Postgresql server
  ansible.builtin.service:
    name: postgresql
    state: restarted

- name: Create Postgresql foreman user
  vars:
    ansible_ssh_pipelining: true
  become: true
  become_user: postgres
  postgresql_user:
    user: "{{ foreman_db_username }}"
    password: "{{ foreman_db_password }}"
    role_attr_flags: CREATEDB,NOSUPERUSER

- name: Create Postgresql foreman database
  vars:
    ansible_ssh_pipelining: true
  become: true
  become_user: postgres
  postgresql_db:
    name: foreman
    state: present

- name: "Set Postgresql {{ foreman_db_username }} user OWNER on foreman database"
  vars:
    ansible_ssh_pipelining: true
  become: true
  become_user: postgres
  postgresql_owner:
    db: foreman
    new_owner: "{{ foreman_db_username }}"
